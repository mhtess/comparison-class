
var index = utils.wpParseFloat(last(process.argv)) // load index as last command line index

// requires webppl packages: webppl-csv and webppl-mht custom packages
// time ~/webppl-fork/webppl fbt-for-subCatpriors-L0-ccEmpirical-explAlt-imh.wppl --require utils 1


var meaning = function(utterance, state, threshold) {
  utterance == "positive" ? state > threshold ? flip(0.9999) : flip(0.0001) :
  utterance == "negative" ? state < threshold ? flip(0.9999) : flip(0.0001) :
  true
}

// were it not for speaker optimality
// this model could be run independently for each item

var dataPath = "/Users/mht/Documents/research/comparison-class/data/";
// var dataPath = "/home/mtessler/projects/comparison-class/data/"

var ccDataFile = "classElicitation-1/class-elicitation-full-trials.csv";
var vsDataFile = "vagueSpeaker-1/vague-prior-elicitation-1-trials.csv";

var ccData = removeExtraRow(dataFrame(utils.readCSV(dataPath + ccDataFile)))
var vsData = removeExtraRow(dataFrame(utils.readCSV(dataPath + vsDataFile), ["response"]))


var subCategories = levels(vsData, "sub_category");
var degrees = levels(vsData, "degree");

var model = function(){

  // only an s1 for the endorsement task
  var alphas = {
    s1: {
      super: uniformDrift( { a:0, b: 20, width: 2} )
    }
  };

  var classParameters = {
    frequency: uniformDrift({a:0, b: 3, width: 0.2})//,
    // charLength: uniformDrift({a:0, b: 3, width: 0.2})
  };

  foreach(degrees, function(degree){
    var degreeData = _.filter(ccData, {degree:degree});
    var subCats = levels(degreeData, "sub_category");
    var superCat = degreeData[0]["super_category"];


    var supercatWeight = exp(
      classParameters.frequency * catFrequencies[superCat]// +
      // classParameters.charLength * superCatLengths[degree]
    );

    foreach(subCats, function(subCat){

      var mu = uniformDrift( { a: -3, b: 3, width:0.5});
      var sigma = uniformDrift({a:0, b:5, width: 0.5});

      var subcatWeight = exp(
        classParameters.frequency * catFrequencies[subCat]// +
        // classParameters.charLength * subCatLengths[subCat]
      );

      var classPrior = Infer({
        model: function(){
          return categorical({vs: ["super", "sub"], ps:[supercatWeight, subcatWeight]})
      }});


      var stateParams = {
        sub: {mu: mu, sigma: sigma},
        super: {mu: 0, sigma: 1}
      }

      // displayObj(stateParams.sub)

      var statePrior = {
        sub: DiscretizedGaussian(stateParams.sub),
        super: DiscretizedGaussian(stateParams.super)
      }

      // var thresholdBins ={
      //   positive: map(function(x){
      //     return  x - (1/(binParam*2));
      //   }, sort(statePrior.super.support())),
      //   negative: map(function(x){
      //     return  x + (1/(binParam*2));
      //   }, sort(statePrior.super.support()))
      // };
      //
      // var thresholdPrior = cache(function(form){
      //   return Infer({
      //     model: function() { return uniformDraw(thresholdBins[form]) }
      //   });
      // });

      var literalListener = cache(function(u, comparisonClass) {
        Infer({model: function(){
          var cc = u.split("_")[1] == "Adjective" ?  comparisonClass :
                    u.split("_")[1] == "silence" ?  comparisonClass :
                    u.split("_")[1]
          var utterance = u.split("_")[0]
          var state = sample(statePrior[cc]);
          var threshold = sample(thetaPrior);
          // display(cc);
          // display(threshold);
          // display(utterance);
          var m = meaning(utterance, state, threshold);
          condition(m);
          return state;
        }})
      }, 10000)

      /////////////////////////////////////////////////
      // for Superordinate class speaker task

      var speaker1_super = cache(function(form) {
        Infer({model: function(){
          var speakerBeliefs = statePrior["sub"];
          var utterance = uniformDraw([form + "_Adjective", "silence_silence"]);

          var L0 = literalListener(utterance, "super")
          var _kl = KL(speakerBeliefs, L0, speakerBeliefs.support());
          factor(alphas.s1.super * -1 * _kl)
          return utterance == form + "_Adjective" ? 1 : 0
        }})
      }, 10000)
      ////////////////////////////////////////

      ////////////////////////////////////////
      // for Comparison Class Inference task
      var literalListener_classInference = cache(function(form) {
        Infer({model: function(){
          var utterance = form;
          var comparisonClass = sample(classPrior);
          var state = sample(statePrior[comparisonClass]);
          // var threshold = sample(thresholdPrior(form));
          var threshold = sample(thetaPrior);
          var m = meaning(utterance, state, threshold);
          condition(m);
          return comparisonClass == "sub" ? "sub_plural" : "super"
        }})
      }, 10000)

      ////////////////////////////////////////

      foreach(["positive","negative"], function(form){

        var d_subcat_superSpeaker = _.map(
          _.filter(vsData, {sub_category: subCat, form:form}),
        "response");
        var d_subcat_ccInference = _.map(
            _.filter(ccData, {sub_category: subCat, form:form}),
        "paraphrase");

        var superSpeakerProbs = speaker1_super(form);

        mapData({data:d_subcat_superSpeaker}, function(d){
	        //  console.log("superSpeaker = " + superSpeakerProbs.score(d))
          observe(superSpeakerProbs, d)
        })

        var ccRSA = literalListener_classInference(form);
        // displayObj(ccRSA)
        mapData({data:d_subcat_ccInference}, function(d){
        //  console.log("cc = "+ ccRSA.score(d))
          observe(ccRSA, d);
        })

        query.add([subCat, "superSpeaker", form], exp(superSpeakerProbs.score(1)))
        query.add([subCat, "superCC", form], exp(ccRSA.score("super")))

      })

      query.add([subCat, "mu", "NA"], mu);
      query.add([subCat, "sigma", "NA"], sigma);

      // query.add([subCat, "subCatPrior", "NA"], subClassPrior);

      })

      // query.add([degree, "superCatPrior", "NA"], superClassPrior)
    })

  // query.add(["superCatPrior", "NA",  "NA"], superClassPrior)
  // query.add(["explicitCost", "NA",  "NA"], explicitCost)
  // query.add(["silenceCost", "NA",  "NA"], silenceCost)

  // query.add(["beta", "length",  "NA"], classParameters.charLength)
  query.add(["beta", "frequency",  "NA"], classParameters.frequency)

  query.add(["speakerOptimality_s1","superSpeaker", "NA"],alphas.s1.super)
  // query.add(["speakerOptimality_s2","superSpeaker", "NA"],alphas.s2.super)
  // query.add(["speakerOptimality_s1","ccRSA", "NA"],alphas.s1.cc)
  // }, subCategories)

  // return _.object(_.flatten(parameters, true));
  return query
}
// 500 iterations (+ 250 burn) = 2 min
var mhiter = 100000;

var burn = mhiter / 2;
var outfile = 'fbt-L0-empiricalCC-disc3-mcmc'+ mhiter+'_burn'+burn+'_chain'+index+'.csv'


// var posterior = Infer({
//   model: model,
//   method: "incrementalMH",
//   samples: mhiter, burn: burn,
//   verbose: T,
//   verboseLag: mhiter / 20,
//   stream: {
//     path: "results/" + outfile,
//     header: ["cat", "param", "form", "val"]
//   }
// })

"file written to = " + outfile;
// display(sort(thetaPrior.support()))
// sort(DiscretizedGaussian({mu:0, sigma:1}).support())
// ccData


// var stateParams = {
//   sub: {"mu":-2.92446325533092,"sigma":0.4532203997951001},
//   super: {mu: 0, sigma: 1}
// }
// //
// var statePrior = {
//   sub: DiscretizedGaussian(stateParams.sub),
//   super: DiscretizedGaussian(stateParams.super)
// }
//
// var classPrior = Infer({
//   model: function(){
//     return categorical({vs: ["super", "sub"], ps:[1, 1]})
// }});
//
//
// var literalListener_classInference = cache(function(form) {
//   Infer({model: function(){
//     var utterance = form;
//     var comparisonClass = sample(classPrior);
//     var state = sample(statePrior[comparisonClass]);
//     // var threshold = sample(thresholdPrior(form));
//     var threshold = sample(thetaPrior);
//     var m = meaning(utterance, state, threshold);
//     condition(m);
//     return comparisonClass == "sub" ? "sub_plural" : "super"
//   }})
// }, 10000)


// var L0_uncertain = cache(function(form) {
//   Infer({model: function(){
//     var utterance = form + "_Adjective";
//     var comparisonClass = sample(classPrior);
//     var state = sample(statePrior[comparisonClass]);
//     var threshold = sample(thetaPrior);
//
//     var m = meaning(utterance, state, threshold);
//     condition(m);
//     return comparisonClass;
//   }})
// })



// pragmaticListener("positive")
// L0_uncertain("positive")




// literalListener_classInference("negative")
