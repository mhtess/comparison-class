// requires webppl packages: webppl-csv and webppl-mht custom packages
// time webppl fbt-for-subCatpriors.wppl --require ~/Documents/research/tools/webppl-csv/ --require mht

var utterances = {
  positive: ["positiveAdjective", "silence"],
  negative: ["negativeAdjective", "silence"]
};

var utterancePrior = cache(function(form){
  return Infer({
    model: function() { return uniformDraw(utterances[form]) }
  })
});

var pam = function(lst, fn){
  return map(fn, lst);
};

var meaning = function(utterance, state, threshold) {
  utterance == "positiveAdjective" ? state > threshold :
  utterance == "negativeAdjective" ? state < threshold :
  true
}

var classPrior = Infer({
  model: function(){return uniformDraw(["sub", "super"])}
});

var round = function(x){
  return Math.round(x*10)/10
};


var distProbs = function(dist, supp) {
  return map(function(s) {
    return Math.exp(dist.score(s))
  }, supp)
}

var KL = function(p, q, supp) {
  var P = distProbs(p, supp), Q = distProbs(q, supp);
  var diverge = function(xp,xq) {
    return xp == 0 ? 0 : (xp * Math.log(xp / xq) );
  };
  return sum(map2(diverge,P,Q));
};

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};


// were it not for speaker optimality
// this model could be run independently for each item

var dataPath = "/Users/mht/Documents/research/comparison-class/data/";
var ccDataFile = "classElicitation-1/class-elicitation-full-trials.csv";
var vsDataFile = "vagueSpeaker-1/vague-prior-elicitation-1-trials.csv";

var ccData = dataFrame(webpplCsv.readCSV(dataPath + ccDataFile))
var vsData = dataFrame(webpplCsv.readCSV(dataPath + vsDataFile))


var subCategories = _.uniq(_.pluck(vsData, "sub_category"));

var model = function(){

  // should probably be an s1 for each task
  var alphas = {
    s1: {
      super: 1,//uniformDrift( { a:0, b: 20, width: 2} ),
      cc: 2//uniformDrift( { a:0, b: 20, width: 2} )
    }
    // s2: {
    //   super: uniformDrift({a:0, b: 4, width: 0.5}),
    // }
  };

  // var parameters = map(function(subCat){
  foreach(subCategories, function(subCat){

      var mu = uniformDrift( { a: -2, b: 2, width:0.5}); // suncat mean is restricted to be +/- 2 stdev from supercat mean
      var sigma = uniformDrift({a:0, b:2, width: 0.3});

      var binParam = 5;

      var stateParams = {
        sub: {mu: mu, sigma: sigma},
        super: {mu: 0, sigma: 1}
      }

      var stateVals = map(
        round,
        _.range(stateParams.super.mu - 2.5 * stateParams.super.sigma,
                stateParams.super.mu + 2.5 * stateParams.super.sigma,
                stateParams.super.sigma/binParam)
      );

      var stateProbs = {
        sub: map(function(s){
          Math.exp(Gaussian(stateParams.sub).score(s))+
          Number.EPSILON
        }, stateVals),
        super: map(function(s){
          Math.exp(Gaussian(stateParams.super).score(s))+
          Number.EPSILON
        }, stateVals)
      };

      var statePrior = {
        sub: Infer({
          model: function(){return categorical({vs:stateVals,ps:stateProbs.sub})}
        }),
        super: Infer({
          model: function(){return categorical({vs:stateVals,ps:stateProbs.super})}
        })
      };

      var thresholdBins ={
        positive: map(function(x){
          return  x - (1/(binParam*2));
        }, sort(statePrior.super.support())),
        negative: map(function(x){
          return  x + (1/(binParam*2));
        }, sort(statePrior.super.support()))
      };

      var thresholdPrior = cache(function(form){
        return Infer({
          model: function() { return uniformDraw(thresholdBins[form]) }
        });
      });

      var literalListener = cache(function(utterance, threshold, comparisonClass) {
        Infer({model: function(){
          var state = sample(statePrior[comparisonClass]);
          var m = meaning(utterance, state, threshold);
          condition(m);
          return state;
        }})
      }, 10000);

      /////////////////////////////////////////////////
      // for Superordinate class speaker task
      var speaker1_super = cache(function(state, threshold, form) {
        Infer({model: function(){
          var utterance = sample(utterancePrior(form))
          var L0 = literalListener(utterance, threshold, "super")
          factor( alphas.s1.super * L0.score(state) )
          return utterance
        }})
      }, 10000)

      var pragmaticListener_super = cache(function(utterance, form) {
        Infer({model: function(){
          var state = sample(statePrior["super"]);
          var threshold = sample(thresholdPrior(form));
          var S1 = speaker1_super(state, threshold, form);
          observe(S1, utterance);
          return state
        }})
      }, 10000)

      var speaker2_super = function(form){
        Infer({model: function(){
          var speakerBeliefs = statePrior["sub"];
          var utterance = sample(utterancePrior(form));
          var L1 = pragmaticListener_super(utterance, form);

          var _kl = KL(speakerBeliefs, L1, speakerBeliefs.support());
          factor(-1 * _kl)

          return utterance == (form + "Adjective")
          }})
      }
      ////////////////////////////////////////

      ////////////////////////////////////////
      // for Comparison Class Inference task
      var speaker1 = cache(function(state, threshold, comparisonClass, form) {
        Infer({model: function(){
          var utterance = sample(utterancePrior(form))
          var L0 = literalListener(utterance, threshold, comparisonClass)
          factor( alphas.s1.cc * L0.score(state) )
          return utterance
        }})
      })

      var pragmaticListener = function(form) {
        Infer({model: function(){
          var utterance = form + "Adjective";
          var comparisonClass = sample(classPrior);
          var state = sample(statePrior["sub"]);
          var threshold = sample(thresholdPrior(form));
          var S1 = speaker1(state, threshold, comparisonClass, form);
          observe(S1, utterance);
          return comparisonClass
        }})
      }
      ////////////////////////////////////////

      foreach(["positive","negative"], function(form){
        // var postPreds = map(function(form){

        var d_subcat_superSpeaker = _.pluck(
          _.where(vsData, {sub_category: subCat, form:form}),
        "prior_response");
        var d_subcat_ccInference = _.pluck(
            _.where(ccData, {sub_category: subCat, form:form}),
        "response");

        var superSpeakerProbs = speaker2_super(form);

        // mapData({data:d_subcat_superSpeaker}, function(d){
        //   observe(superSpeakerProbs, d)
        // })

        var ccRSA = pragmaticListener(form);
        //
        // mapData({data:d_subcat_ccInference}, function(d){
        //   observe(ccRSA, d);
        // })

        query.add("superSpeaker",
          [form, Math.exp(superSpeakerProbs.score(true))])
        query.add("superCC",
          [form, Math.exp(ccRSA.score(true))])

        // return [
        //   ["predictive_superSpeaker_" + form, Math.exp(superSpeakerProbs.score(true))],
        //   ["predictive_superCC_" + form, Math.exp(ccRSA.score("super"))]
        // ]

      // }, ["positive","negative"])
    })

    query.add(subCat, ["mu", mu])
    query.add(subCat, ["sigma", sigma])
    // return [[subCat, _.object([["mu", mu], ["sigma", sigma],
    // postPreds[0][0], postPreds[1][0],
    // postPreds[1][0], postPreds[1][1]])]]

  })

  // }, subCategories)

  // return _.object(_.flatten(parameters, true));
  return query
}

var posterior = Infer({
  model: model,
  method: "MCMC",
  samples: 2, burn: 2,
  verbose: T
  // verboseLag: samples / 5
})
// model()
webpplCsv.writeQueryERP(posterior, "results/filename.csv", ["cat", "param", "val"])
