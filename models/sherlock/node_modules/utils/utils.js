var fs = require('fs');
var babyparse = require('babyparse');
var present = require('present');
var erf = require( 'compute-erf' );
var jStat = require('jStat').jStat;

// can work with an erp of query.tables (useful for data analysis models)

function readCSV(filename){
  return babyparse.parse(fs.readFileSync(filename, 'utf8')).data;
};

function writeCSV(jsonCSV, filename){
  fs.writeFileSync(filename, babyparse.unparse(jsonCSV) + "\n");
};

// for more manual file writing control
var openFile = function(filename) {
 var csvFile = fs.openSync(filename, 'w');
 return csvFile
};

var writeLine = function(handle, line){
  fs.writeSync(handle, line+'\n');
};


var closeFile = function(handle){
 fs.closeSync(handle);
};

function erf(x){
  return erf(x)
};

function getTime(){
  return present()
};

function isNumeric(num){
  return !isNaN(num);
};

function wpParseFloat(x){
  return parseFloat(x);
};

function parseInt(x){
  return parseInt(x);
};

function fillArray(value, len) {
  var arr = [];
  for (var i = 0; i < len; i++) {
    arr.push(value);
  }
  return arr;
};

function closest(arr, closestTo){

    var closest = Math.max.apply(null, arr); //Get the highest number in arr in case it match nothing.
    for(var i = 0; i < arr.length; i++){ //Loop the array
        if(arr[i] >= closestTo && arr[i] < closest) closest = arr[i]; //Check if it's higher than your number, but lower than your closest value
    }
    return closest; // return the value
};


function uniformCDF(x, params){
  return jStat.uniform.cdf( x, params.a, params.b )
}

function gaussianCDF(x, params){
  return jStat.normal.cdf( x, params.mu, params.sigma )
}

function lognormalCDF(x, params){
  return jStat.lognormal.cdf( x, params.mu, params.sigma )
}


module.exports = {
  readCSV: readCSV,
  writeCSV: writeCSV,
  openFile: openFile,
  closeFile: closeFile,
  writeLine: writeLine,
  wpParseFloat: wpParseFloat,
  parseInt: parseInt,
  erf: erf,
  closest: closest,
  getTime: getTime,
  fillArray: fillArray,
  uniformCDF: uniformCDF,
  gaussianCDF: gaussianCDF,
  lognormalCDF: lognormalCDF
};
