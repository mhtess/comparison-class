var eps = Number.EPSILON;

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var distProbs = function(dist, supp) {
  return map(function(s) {
    return Math.exp(dist.score(s))
  }, supp)
}

var KL = function(p, q, supp) {
  var P = distProbs(p, supp), Q = distProbs(q, supp);
  var diverge = function(xp,xq) {
    return xp == 0 ? 0 : (xp * Math.log(xp / xq) );
  };
  return sum(map2(diverge,P,Q));
};


var pam = function(lst, fn){
  return map(fn, lst);
};

var roundTo3 = function(x){
  return Math.round(x * 10000) / 10000
}
var round = function(x){
  return Math.round(x*10)/10
};

var exp = function(x){ return Math.exp(x); };

var probability = function(x, Dist) {
    return exp(Dist.score(x));
}

var marginalize = function(myDist, label){
    Infer({method: "enumerate"}, function(){
        var x = sample(myDist);
        return x[label]
    });
};

var binParam = 3;
var binWidth = 1/binParam;
var lowerBound = -3, upperBound = 3.1;

var upperBins =  _.range(
  lowerBound, upperBound, binWidth
)
var lowerBins = [lowerBound - binWidth].concat(
  upperBins.slice(0, upperBins.length - 1)
)

var midBins = map2(function(b1,b2){
  var diff = Math.abs(b2 - b1) / 2;
  return roundTo3(b1 + diff)
}, lowerBins, upperBins)

var thetaBins = map2(function(b1, b2){
  var diff = Math.abs(b2 - b1) / 2;
  return roundTo3(diff + b1);
}, midBins.slice(0, midBins.length-1), midBins.slice(1))


// var upperThetaBins = map2(function(b1, b2){
//   var diff = Math.abs(b2 - b1) / 2;
//   return roundTo3(diff+ b1);
// }, midBins.slice(0, midBins.length-1), midBins.slice(1))

var DiscretizedGaussian = function(gaussianParams){
	return Infer({model: function(){
    return categorical({
      vs: midBins,
      ps: map2(function(b1, b2){
        return eps +
        utils.gaussianCDF(b2, gaussianParams) -
        utils.gaussianCDF(b1, gaussianParams)
      }, lowerBins, upperBins)
    })
  }})
}

var thetaPrior = Infer({model: function(){
  var uniformParams = {a:_.min(midBins),b:_.max(midBins)};
    return categorical({
          vs: thetaBins,
          ps: map2(function(b1, b2){
            return utils.uniformCDF(b2, uniformParams) -
                   utils.uniformCDF(b1, uniformParams)
          }, midBins.slice(0, midBins.length-1),
            midBins.slice(1))
        })
}})


var dataFrame = function(d, fieldsToNumerify){
    return map(
        function(lst){
            return _.fromPairs(map(function(l){
                return _.indexOf(fieldsToNumerify, l[0]) > -1 ?
                            [l[0], utils.wpParseFloat(l[1])] : l
            },
            _.zip(d[0],lst)
            ))
        },
        d.slice(1))
}

var removeExtraRow = function(lst){
  return lst.slice(0, lst.length - 1)
}

var levels = function(df, label){
  return _.uniqBy(_.map(df, label));
}
var displayObj =  function(x){display(JSON.stringify(x))};
