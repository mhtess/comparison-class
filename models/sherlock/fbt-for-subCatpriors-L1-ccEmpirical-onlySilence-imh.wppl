
var index = utils.wpParseFloat(last(process.argv)) // load index as last command line index

// requires webppl packages: webppl-csv and webppl-mht custom packages
// time webppl fbt-for-subCatpriors.wppl --require ~/Documents/research/tools/webppl-csv/ --require mht

var utterances = {
  positive: ["positiveAdjective", "silence"],
  negative: ["negativeAdjective", "silence"]
};


// var utterancePrior = cache(function(form){
//   return Infer({
//     model: function() { return uniformDraw(utterances[form]) }
//   })
// });

var pam = function(lst, fn){
  return map(fn, lst);
};

var meaning = function(utterance, state, threshold) {
  utterance == "positiveAdjective" ? state > threshold ? flip(0.9999) : flip(0.0001) :
  utterance == "negativeAdjective" ? state < threshold ? flip(0.9999) : flip(0.0001) :
  true
}

var round = function(x){
  return Math.round(x*10)/10
};


var distProbs = function(dist, supp) {
  return map(function(s) {
    return Math.exp(dist.score(s))
  }, supp)
}

var KL = function(p, q, supp) {
  var P = distProbs(p, supp), Q = distProbs(q, supp);
  var diverge = function(xp,xq) {
    return xp == 0 ? 0 : (xp * Math.log(xp / xq) );
  };
  return sum(map2(diverge,P,Q));
};


// were it not for speaker optimality
// this model could be run independently for each item

// var dataPath = "/Users/mht/Documents/research/comparison-class/data/";
var dataPath = "/home/mtessler/projects/comparison-class/data/"
var ccDataFile = "classElicitation-1/class-elicitation-full-trials-freq-length.csv";
var vsDataFile = "vagueSpeaker-1/vague-prior-elicitation-1-trials.csv";

var ccData = dataFrame(utils.readCSV(dataPath + ccDataFile))
var vsData = dataFrame(utils.readCSV(dataPath + vsDataFile), ["response"])

var subCategories0 = _.uniq(_.pluck(vsData, "sub_category"));
var subCategories = subCategories0.slice(0, subCategories0.length - 1);

var degrees0 = _.uniq(_.pluck(vsData, "degree"));
var degrees = degrees0.slice(0, degrees0.length - 1);

var model = function(){

  // should probably be an s1 for each task
  var alphas = {
    s1: {
      super: uniformDrift( { a:0, b: 20, width: 2} ),
      cc: uniformDrift( { a:0, b: 20, width: 2} )
    },
    s2: {
      super: uniformDrift({a:0, b: 4, width: 0.5}),
    }
  };

  var silenceCost = uniformDrift({a: 0, b: 1, width : 0.1})
  var utteranceProbs = [1, silenceCost];
  // var utteranceProbs = map(function(c) {return exp(-c)}, utteranceCosts);
  var utterancePrior = cache(function(form){
    return Infer({
      model: function() {
        return categorical({
          vs: utterances[form],
          ps: utteranceProbs
        })
      }
    })
  });

  var classParameters = {
    frequency: uniformDrift({a:0, b: 1, width: 0.05}),
    charLength: uniformDrift({a:0, b: 1, width: 0.05})
  };

  foreach(degrees, function(degree){

    var degreeData = _.where(ccData, {degree:degree});
    var subCats = _.uniq(_.pluck(degreeData, "sub_category"));

    // var superFreq = degreeData[0]["logSuperFreq"];
    // var superLength = degreeData[0]["superLength"];

    // var supercatWeight = exp(classParameters.frequency * superFreq +
                            // classParameters.charLength * superLength);
    var supercatWeight = exp(classParameters.frequency * superCatFrequencies[degree] +
                            classParameters.charLength * superCatLengths[degree]);
    // display(supercatWeight)

  // var parameters = map(function(subCat){
    foreach(subCats, function(subCat){

      var mu = uniformDrift( { a: -3, b: 3, width:0.5});
      var sigma = uniformDrift({a:0, b:3, width: 0.3});

      var subCatData = _.where(ccData, {sub_category: subCat});

      // var subFreq = subCatData[0]["logSuperFreq"];
      // var subLength = subCatData[0]["subLength"];
      // display(subCat)
      // display(subFreq)
      var subcatWeight = exp(classParameters.frequency * subCatFrequencies[subCat] +
                            classParameters.charLength * subCatLengths[subCat]);
      // var subcatWeight = exp(classParameters.frequency * subFreq +
                            // classParameters.charLength * subLength);
      // display(subcatWeight)

      var classPrior = Infer({
        model: function(){
          return categorical({vs: ["super", "sub"], ps:[supercatWeight, subcatWeight]})
      }});

      var binParam = 3;

      var stateParams = {
        sub: {mu: mu, sigma: sigma},
        super: {mu: 0, sigma: 1}
      }

      var stateVals = map(
        round,
        _.range(stateParams.super.mu - 3 * stateParams.super.sigma,
                stateParams.super.mu + 3 * stateParams.super.sigma,
                stateParams.super.sigma/binParam)
      );

      var stateProbs = {
        sub: map(function(s){
          Math.exp(Gaussian(stateParams.sub).score(s))+
          Number.EPSILON
        }, stateVals),
        super: map(function(s){
          Math.exp(Gaussian(stateParams.super).score(s))+
          Number.EPSILON
        }, stateVals)
      };

      var statePrior = {
        sub: Infer({
          model: function(){return categorical({vs:stateVals,ps:stateProbs.sub})}
        }),
        super: Infer({
          model: function(){return categorical({vs:stateVals,ps:stateProbs.super})}
        })
      };

      var thresholdBins ={
        positive: map(function(x){
          return  x - (1/(binParam*2));
        }, sort(statePrior.super.support())),
        negative: map(function(x){
          return  x + (1/(binParam*2));
        }, sort(statePrior.super.support()))
      };

      var thresholdPrior = cache(function(form){
        return Infer({
          model: function() { return uniformDraw(thresholdBins[form]) }
        });
      });

      var literalListener = cache(function(utterance, threshold, comparisonClass) {
        Infer({model: function(){
          var state = sample(statePrior[comparisonClass]);
          var m = meaning(utterance, state, threshold);
          condition(m);
          return state;
        }})
      }, 10000);

      /////////////////////////////////////////////////
      // for Superordinate class speaker task
      var speaker1_super = cache(function(state, threshold, form) {
        Infer({model: function(){
          var utterance = uniformDraw([form + "Adjective", "silence"])
          var L0 = literalListener(utterance, threshold, "super")
          factor( alphas.s1.super * L0.score(state) )
          return utterance
        }})
      }, 10000)

      var pragmaticListener_super = cache(function(utterance, form) {
        Infer({model: function(){
          var state = sample(statePrior["super"]);
          var threshold = sample(thresholdPrior(form));
          var S1 = speaker1_super(state, threshold, form);
          observe(S1, utterance);
          return state
        }})
      }, 10000)

      var speaker2_super = function(form){
        Infer({model: function(){
          var speakerBeliefs = statePrior["sub"];
          var utterance = uniformDraw([form + "Adjective", "silence"])
          var L1 = pragmaticListener_super(utterance, form);

          var _kl = KL(speakerBeliefs, L1, speakerBeliefs.support());
          factor(-1 * alphas.s2.super * _kl)

          return utterance == (form + "Adjective") ? 1 : 0
          }})
      }
      ////////////////////////////////////////

      ////////////////////////////////////////
      // for Comparison Class Inference task
      var speaker1 = cache(function(state, threshold, comparisonClass, form) {
        Infer({model: function(){
          var utterance = sample(utterancePrior(form))
          var L0 = literalListener(utterance, threshold, comparisonClass)
          factor( alphas.s1.cc * L0.score(state) )
          return utterance
        }})
      }, 10000)

      var pragmaticListener = function(form) {
        Infer({model: function(){
          var utterance = form + "Adjective";
          var comparisonClass = sample(classPrior);
          var state = sample(statePrior["sub"]);
          var threshold = sample(thresholdPrior(form))
          var S1 = speaker1(state, threshold, comparisonClass, form);
          observe(S1, utterance);
          return comparisonClass == "sub" ? "sub_plural" : "super"
        }})
      }
      ////////////////////////////////////////

      foreach(["positive","negative"], function(form){

        var d_subcat_superSpeaker = _.pluck(
          _.where(vsData, {sub_category: subCat, form:form}),
        "response");
        var d_subcat_ccInference = _.pluck(
            _.where(ccData, {sub_category: subCat, form:form}),
        "paraphrase");

        var superSpeakerProbs = speaker2_super(form);

        mapData({data:d_subcat_superSpeaker}, function(d){
	        //  console.log("superSpeaker = " + superSpeakerProbs.score(d))
          observe(superSpeakerProbs, d)
        })

        var ccRSA = pragmaticListener(form);

        mapData({data:d_subcat_ccInference}, function(d){
        //  console.log("cc = "+ ccRSA.score(d))
          observe(ccRSA, d);
        })

        query.add([subCat, "superSpeaker", form], Math.exp(superSpeakerProbs.score(1)))
        query.add([subCat, "superCC", form], Math.exp(ccRSA.score("super")))

      })

      query.add([subCat, "mu", "NA"], mu);
      query.add([subCat, "sigma", "NA"], sigma);
      query.add([subCat, "prior", "NA"], gaussian(mu, sigma));

      // query.add([subCat, "subCatPrior", "NA"], subClassPrior);

      })

      // query.add([degree, "superCatPrior", "NA"], superClassPrior)
    })

  query.add(["silenceCost", "NA",  "NA"], silenceCost)

  query.add(["beta", "length",  "NA"], classParameters.charLength)
  query.add(["beta", "frequency",  "NA"], classParameters.frequency)

  query.add(["speakerOptimality_s1","superSpeaker", "NA"],alphas.s1.super)
  query.add(["speakerOptimality_s1","ccRSA", "NA"],alphas.s1.cc)
  query.add(["speakerOptimality_s2","superSpeaker", "NA"],alphas.s2.super)
  // }, subCategories)

  // return _.object(_.flatten(parameters, true));
  return query
}

var mhiter = 3000;
var burn = mhiter / 2;
var posterior = Infer({
  model: model,
  method: "incrementalMH",
  samples: mhiter, burn: burn,
  verbose: T,
  verboseLag: mhiter / 20
})

var outfile = 'results/fbt-L1-silenceAlt-silenceCost-empiricalCC-narrowPrior-S2flip-mcmc'+ mhiter+'_burn'+burn+'_chain'+index+'.csv'

utils.writeQueryERP(posterior, outfile, ["cat", "param", "form", "val"])
display("file written to = " + outfile)
