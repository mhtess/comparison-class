var utterances = {
  positive: ["positiveAdjective", "silence"],
  negative: ["negativeAdjective", "silence"]
};

var utterancePrior = cache(function(form){
  return Infer({
    model: function() { return uniformDraw(utterances[form]) }
  })
});

var pam = function(lst, fn){
  return map(fn, lst);
};

var meaning = function(utterance, state, threshold) {
  utterance == "positiveAdjective" ? state > threshold :
  utterance == "negativeAdjective" ? state < threshold :
  true
}

var classPrior = Infer({
  model: function(){return uniformDraw(["sub", "super"])}
});

var round = function(x){
  return Math.round(x*10)/10
};


var distProbs = function(dist, supp) {
  return map(function(s) {
    return Math.exp(dist.score(s))
  }, supp)
}

var KL = function(p, q, supp) {
  var P = distProbs(p, supp), Q = distProbs(q, supp);
  var diverge = function(xp,xq) {
    return xp == 0 ? 0 : (xp * Math.log(xp / xq) );
  };
  return sum(map2(diverge,P,Q));
};


// were it not for speaker optimality
// this model could be run independently for each item

// pretend like I collected 25 subjects who all gave my response;
var data_superSpeaker = _.flatten(repeat(25, function(){ return dataFromR.superSpeaker }))
// pretend like the ave. slider ratings were proportions of forced choice responses
var data_ccInference = _.flatten(map(function(d){
  return repeat(Math.round(d.mean*100), function(){
    return {
      response: d.key,
      sub_category: d.sub_category,
      form: d.form
    }
  })
}, dataFromR.ccInference));

// display(data_ccInference)

var subCategories = _.uniq(_.pluck(data_superSpeaker, "sub_category"));

var model = function(){

  // should probably be an s1 for each task
  var alphas = {s1: {super: 3, cc: 2}, s2: 1};
  // might need to put uncertainty over alphas

  var parameters = map(function(subCat){

      var mu = uniformDrift({a:-2, b: 2, width:0.5}); // suncat mean is restricted to be +/- 2 stdev from supercat mean
      var sigma = uniformDrift({a:0, b:1, width: 0.2}); // subcat variance probably should be lower than supercat variance
      var binParam = 5;

      var stateParams = {
        sub: {mu: mu, sigma: sigma},
        super: {mu: 0, sigma: 1}
      }

      var stateVals = map(
        round,
        _.range(stateParams.super.mu - 2.5 * stateParams.super.sigma,
                stateParams.super.mu + 2.5 * stateParams.super.sigma,
                stateParams.super.sigma/binParam)
      );

      var stateProbs = {
        sub: map(function(s){
          Math.exp(Gaussian(stateParams.sub).score(s))+
          Number.EPSILON
        }, stateVals),
        super: map(function(s){
          Math.exp(Gaussian(stateParams.super).score(s))+
          Number.EPSILON
        }, stateVals)
      };

      var statePrior = {
        sub: Infer({
          model: function(){return categorical({vs:stateVals,ps:stateProbs.sub})}
        }),
        super: Infer({
          model: function(){return categorical({vs:stateVals,ps:stateProbs.super})}
        })
      };

      var thresholdBins ={
        positive: map(function(x){
          return  x - (1/(binParam*2));
        }, sort(statePrior.super.support())),
        negative: map(function(x){
          return  x + (1/(binParam*2));
        }, sort(statePrior.super.support()))
      };

      var thresholdPrior = cache(function(form){
        return Infer({
          model: function() { return uniformDraw(thresholdBins[form]) }
        });
      });

      var literalListener = cache(function(utterance, threshold, comparisonClass) {
        Infer({model: function(){
          var state = sample(statePrior[comparisonClass]);
          var m = meaning(utterance, state, threshold);
          condition(m);
          return state;
        }})
      }, 10000);

      /////////////////////////////////////////////////
      // for Superordinate class speaker task
      var speaker1_super = cache(function(state, threshold, form) {
        Infer({model: function(){
          var utterance = sample(utterancePrior(form))
          var L0 = literalListener(utterance, threshold, "super")
          factor( alphas.s1.super * L0.score(state) )
          return utterance
        }})
      }, 10000)

      var pragmaticListener_super = cache(function(utterance, form) {
        Infer({model: function(){
          var state = sample(statePrior["super"]);
          var threshold = sample(thresholdPrior(form));
          var S1 = speaker1_super(state, threshold, form);
          observe(S1, utterance);
          return state
        }})
      }, 10000)

      var speaker2_super = function(form){
        Infer({model: function(){
          var speakerBeliefs = statePrior["sub"];
          var utterance = sample(utterancePrior(form));
          var L1 = pragmaticListener_super(utterance, form);

          var _kl = KL(speakerBeliefs, L1, speakerBeliefs.support());
          factor(-1 * _kl)

          return utterance == (form + "Adjective")
          }})
      }
      ////////////////////////////////////////

      ////////////////////////////////////////
      // for Comparison Class Inference task
      var speaker1 = cache(function(state, threshold, comparisonClass, form) {
        Infer({model: function(){
          var utterance = sample(utterancePrior(form))
          var L0 = literalListener(utterance, threshold, comparisonClass)
          factor( alphas.s1.cc * L0.score(state) )
          return utterance
        }})
      })

      var pragmaticListener = function(form) {
        Infer({model: function(){
          var utterance = form + "Adjective";
          var comparisonClass = sample(classPrior);
          var state = sample(statePrior["sub"]);
          var threshold = sample(thresholdPrior(form));
          var S1 = speaker1(state, threshold, comparisonClass, form);
          observe(S1, utterance);
          return comparisonClass
        }})
      }
      //////////////////////////////////////////

      var postPreds = map(function(form){

        var d_subcat_superSpeaker = _.pluck(
          _.where(data_superSpeaker, {sub_category: subCat, form:form}),
        "prior_response");
        var d_subcat_ccInference = _.pluck(
            _.where(data_ccInference, {sub_category: subCat, form:form}),
        "response");

        var superSpeakerProbs = speaker2_super(form);
        var linkedSpeaker = Binomial({n: 10, p: Math.exp(superSpeakerProbs.score(true))});

        mapData({data:d_subcat_superSpeaker}, function(d){
          observe(linkedSpeaker, d)
        })

        var ccRSA = pragmaticListener(form);

        mapData({data:d_subcat_ccInference}, function(d){
          display(d + " " + ccRSA.score(d))
          observe(ccRSA, d);
        })

        return [
          ["predictive_superSpeaker_" + form, Math.exp(superSpeakerProbs.score(true))],
          ["predictive_superCC_" + form, Math.exp(ccRSA.score("super"))]
        ]

      }, ["positive","negative"])

    return [[subCat, _.object([["mu", mu], ["sigma", sigma],
    postPreds[0][0], postPreds[1][0],
    postPreds[1][0], postPreds[1][1]])]]

  }, subCategories)

  return _.object(_.flatten(parameters, true));

}
